import React, { Component } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import '../../styles/thada.css'
import {
    FormGroup,
    Label,
   Input,Modal,ModalBody,ModalFooter, Card, CardHeader, CardBody, ModalHeader
  } from "reactstrap";
import _ from 'lodash';
import * as basic from "../../store/actions/basic.action.js";


class PurchaseParty extends Component {
    constructor(props) {
        super(props);
        this.state = {
            modal:false,
            editedMaterial:{},
            filterName:"",
            addedParty:{},
            balance_party:{},
            balance_component:false,
            currentList:[],
            partyList:[],
        }
    }
    
    componentDidMount(){
        if(this.props.purchase_party.length>0){
            this.partySetter(this.props.purchase_party,"purchase")        
        }else{
            this.getPartyList("purchasePartyList","purchase")
        }
        if(this.props.sales_party.length>0){
            this.partySetter(this.props.sales_party,"sales") 
        }else{
            this.getPartyList("salesPartyList","sales")
        }
    }

    getPartyList=(api,type)=>{
        this.props.distributer({},api).then(response => {
            if(response['status']===200){
                 this.partySetter(response['data'],type)
            }else{ 
              this.toasterHandler("error", response['msg'] || "Cant reach the server")
            }
          }).catch((err)=>{
            this.toasterHandler("error", "Cant reach the server")
          })
    }
    
    partySetter=(list,type)=>{
        let {currentList,partyList}={...this.state}
        list.map(a=>(a['type']=type,a['opening']=0,a['list']=[]));
        currentList = currentList.concat(list)
        partyList =partyList.concat(list)
        this.setState({currentList,partyList})

    }

    toasterHandler = (type, msg) => {
        toast[type](msg, {
            position: toast.POSITION.TOP_RIGHT,
        });
    }
    
    handleChange=(e,item,ind)=>{
        let { currentList } = { ...this.state }
        currentList[ind]["opening"] = e.target.value       
            this.setState({ currentList })
    }


   
    upload=()=>{
        this.props.distributer(this.state.currentList,"uploadOpeningPartyBalance").then(response => {
            if(response['status']===200){
               
            }else{ 
              this.toasterHandler("error", response['msg'] || "Cant reach the server")
            }
          }).catch((err)=>{
            this.toasterHandler("error", "Cant reach the server")
          })
        
    }

    
    handleFilterChange=(val)=>{
        let {currentList,partyList,filterName}={...this.state}
        filterName=val || ""
        currentList=_.filter(partyList, function(o) { return ((o['party'].toLowerCase()).includes(filterName.toLowerCase())   )})
        this.setState({currentList,filterName})
    }
  
    render() {
        let {currentList,modal,filterName,mode,addedParty,balance_component,balance_party}={...this.state}
        return (
            <div className="flex d-flex justify-content-center">
                    <Card className="col-lg-10">
                        <CardHeader className="bg-primary h5 text-light m-2">
                        <div className="row  col-12">
                                    <div className="col-3">Id</div>
                                    <div className="col-3">Name</div>
                                    <div className="col-3">Type</div>
                                    <div className="col-3">Opening</div>
                                </div>
                        </CardHeader>
                        <CardBody className="h6">
                        <div className="row m-1  border p-3">

                        <span className="col-lg-6"><Input  autoComplete="OFF" placeholder="Search..."  type="text" name="filter" value={filterName} onChange={e=>this.handleFilterChange(e.target.value)} /></span>
                        <span className="col-lg-6"><Input  type="button" name="filter" value={"Upload"} onClick={e=>this.upload()} /></span>
                                   
                                </div>
                    {currentList && currentList.map((item,ind)=>
                                <div className="row m-1  border p-3" key={ind}>
                                    <div className="col-3">{ind+1+") "}{item['id']}</div>                 
                                    <div className="col-3">{item['party']}</div>
                                    <div className="col-3">{item['type']}</div>
                                    <div className="col-3"><Input value={item['opening']}  onChange={e=>this.handleChange(e,item,ind)}/></div>
                                    {/* <div className="col-2">
                                        <i className="fa fa-lg fa-eye c-pointer text-primary mr-2" onClick={e=>this.handle_balance_component(item)}></i>
                                        <i className="fa fa-lg fa-pencil c-pointer text-success mr-2" onClick={e=>this.setState({addedParty:item,modal:true,mode:"edit"})}></i>
                                        <i className="fa fa-lg fa-trash c-pointer text-danger" onClick={e=>this.deleteParty(item)}></i>
                                        </div> */}
                                </div>
                    )}
                    </CardBody>
                    </Card>   

                    <Modal className="modal-width" isOpen={modal} size="lg" >
                    <ModalHeader className=" h4 text-light bg-info">
                    <span className="col-10 h4 text-light bg-info">{mode==="add"?"New":"Edit"} Party</span>
                    </ModalHeader>
                    <ModalBody>
                                <div className="flex row  p-3 text-primary">
                                    <div className="col-12 row m-1">
                                            <div className="col-lg-6 font-weight-bold ">Name:</div>
                                            <div className="col-lg-6 row"><Input value={addedParty['party'] || ""} name="party" onChange={e=>this.handleChange(e)}></Input></div>
                                    </div>
                                    <div className="col-12 row m-1">
                                            <div className="col-lg-6 font-weight-bold ">Address:</div>
                                            <div className="col-lg-6 row"><Input value={addedParty['address'] || ""} name="address" onChange={e=>this.handleChange(e)}></Input></div>
                                    </div>
                               
                                    <div className="col-12 row m-1">
                                            <div className="col-lg-6 font-weight-bold ">Balance:</div>
                                            <div className="col-lg-6 row"><Input type="number" value={addedParty['balance'] || ""} name="balance" onChange={e=>this.handleChange(e)} ></Input></div>
                                    </div>

                                </div>
                            
                          
                    </ModalBody>
                    <ModalFooter>
                        <button className="btn btn-success" onClick={e=> 
                                            
                                            mode==="add"?
                                                (this.upload())
                                                :
                                                (this.editParty())

                                            
                                            
                                            }>Save</button>{' '}
                        <button className="btn btn-danger" onClick={e=>this.setState({addedParty:{},modal:false})}>Cancel</button>
                    </ModalFooter>
                 </Modal>   
               
                
            </div>
        );
    }
}

function mapStateToProps(state) {
    return {
        purchase_party: state.Reducer.purchase_party,
        sales_party:state.Reducer.sales_party,

    };
}

function mapDispatchToProps(dispatch) {
    return {
        distributer: (data,api) => { return dispatch(basic.distributer(data,api)); },
        dataStoreSetter: (data,type) => { return dispatch(basic.dataStoreSetter(data,type)); },

    };
}

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(PurchaseParty));